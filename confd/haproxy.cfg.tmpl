global
  log 127.0.0.1 local0 notice
  maxconn 2000
  user haproxy
  group haproxy

defaults
  log global
  mode http
  retries 3

  timeout connect 5000
  timeout client 10000
  timeout server 10000

  balance roundrobin

  option httplog
  option dontlognull
  option redispatch

  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

frontend http
  bind *:80
{{range $domain := lsdir "/infra/haproxy/domains"}}
  {{$domainfull := printf "/infra/haproxy/domains/%s/domain" $domain}}
  acl is_{{base $domain}} hdr_end(host) -i {{getv $domainfull}}
{{end}}
{{range $domain := lsdir "/infra/haproxy/domains"}}
  use_backend {{base $domain}} if is_{{base $domain}}
{{end}}

{{if exists "/infra/haproxy/tls/key"}}
frontend https
  bind *:443 ssl crt {{getv "/infra/haproxy/tls/key"}}
{{range $domain := lsdir "/infra/haproxy/domains"}}
  {{$domaintls := printf "/infra/haproxy/domains/%s/tls" $domain}}
  {{if exists $domaintls}}
    {{$domainfull := printf "/infra/haproxy/domains/%s/domain" $domain}}
    acl is_{{base $domain}} hdr_end(host) -i {{getv $domainfull}}
  {{end}}
{{end}}
{{range $domain := lsdir "/infra/haproxy/domains"}}
  {{$domaintls := printf "/infra/haproxy/domains/%s/tls" $domain}}
  {{if exists $domaintls}}
    use_backend {{base $domain}} if is_{{base $domain}}
  {{end}}
{{end}}

{{range $domain := lsdir "/infra/haproxy/domains"}}
backend {{base $domain}}
  mode http
  balance roundrobin
  option httpclose
  option forwardfor
  {{$healthcheck := printf "/infra/haproxy/domains/%s/healthcheck" $domain}}
  {{$domainfull := printf "/infra/haproxy/domains/%s/domain" $domain}}
  {{$domaintls := printf "/infra/haproxy/domains/%s/tls" $domain}}
  {{if exists $domaintls}}
    redirect scheme https if !{ ssl_fc }
  {{end}}
  {{if exists $healthcheck}}
    option httpchk HEAD {{getv $healthcheck}} HTTP/1.1\r\nHost:\ {{getv $domainfull}}
  {{end}}
  {{$servers := printf "/infra/haproxy/domains/%s/servers/*" $domain}}
  {{range gets $servers}}
    server {{base .Key}} {{.Value}} {{if exists $healthcheck}} check inter 2000 {{end}}
  {{end}}
{{end}}

listen stats :9000
  mode http

  stats enable
  stats hide-version
  stats realm Haproxy
  stats uri /
  stats auth {{getv "/infra/haproxy/auth/user"}}:{{getv "/infra/haproxy/auth/password"}}
